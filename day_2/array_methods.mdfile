::[] *args :Returns a new array populated with the given objects.
::new :Returns a new array.
::try_convert :Tries to convert obj into an array, using to_ary method. Returns the converted array or nil if obj cannot be converted for any reason. This method can be used to check if an argument is an array.
#& :Set Intersection — Returns a new array containing unique elements common to the two arrays. The order is preserved from the original array.
-#* :Repetition — With a String argument, equivalent to ary.join(str).
#+ :Concatenation — Returns a new array built by concatenating the two arrays together to produce a third array.
#- :Difference - Returns a new array that is a copy of the original array, removing any items that also appear in other_ary. The order is preserved from the original array.
#<< :Append—Pushes the given object on to the end of this array. This expression returns the array itself, so several appends may be chained together.
#<=> :Comparison — Returns an integer (-1, 0, or +1) if this array is less than, equal to, or greater than other_ary.
#== :Equality — Two arrays are equal if they contain the same number of elements and if each element is equal to (according to Object#==) the corresponding element in other_ary.
#[] :Element Reference — Returns the element at index, or returns a subarray starting at the start index and continuing for length elements, or returns a subarray specified by range of indices.
#[]= :ary Element Assignment — Sets the element at index, or replaces a subarray from the start index for length elements, or replaces a subarray specified by the range of indices.
#assoc :Searches through an array whose elements are also arrays comparing obj with the first element of each contained array using obj.==.
#at :Returns the element at index. A negative index counts from the end of self. Returns nil if the index is out of range.
#bsearch :By using binary search, finds a value from this array which meets the given condition in O(log n) where n is the size of the array.
#clear :Removes all elements from self.
#collect :Invokes the given block once for each element of self.
#collect! :Invokes the given block once for each element of self, replacing the element with the value returned by the block.
#combination :When invoked with a block, yields all combinations of length n of elements from the array and then returns the array itself.
#compact :Returns a copy of self with all nil elements removed.
#compact! :Removes nil elements from the array.
#concat :Appends the elements of +other_ary+s to self.
#count :Returns the number of elements.
#cycle :Calls the given block for each element n times or forever if nil is given.
#delete :Deletes all items from self that are equal to obj.
#delete_at :Deletes the element at the specified index, returning that element, or nil if the index is out of range.
#delete_if :Deletes every element of self for which block evaluates to true.
#drop :Drops first n elements from ary and returns the rest of the elements in an array.
#drop_while :Drops elements up to, but not including, the first element for which the block returns nil or false and returns an array containing the remaining elements.
#each :Calls the given block once for each element in self, passing that element as a parameter. Returns the array itself.
#each_index :Same as #each, but passes the index of the element instead of the element itself.
#empty? :Returns true if self contains no elements.
#eql? :Returns true if self and other are the same object, or are both arrays with the same content (
#fetch :Tries to return the element at position index, but throws an IndexError exception if the referenced index lies outside of the array bounds. This error can be prevented by supplying a second argument, which will act as a default value.
-#fill :The first three forms set the selected elements of self (which may be the entire array) to obj.
#find_index :Returns the index of the first object in ary such that the object is == to obj.
#first : Returns the first element, or the first n elements, of the array. If the array is empty, the first form returns nil, and the second form returns an empty array. See also #last for the opposite effect.
-#flatten :Returns a new array that is a one-dimensional flattening of self (recursively).
-#flatten! :Flattens self in place.
-#frozen? :Return true if this array is frozen (or temporarily frozen while being sorted).
#hash :Compute a hash-code for this array.
#include? :Returns true if the given object is present in self (that is, if any element == object), otherwise returns false.
#index :Returns the index of the first object in ary such that the object is == to obj.
-#initialize_copy :Replaces the contents of self with the contents of other_ary, truncating or expanding if necessary.
#insert :Inserts the given values before the element with the given index.
#inspect :Creates a string representation of self.
#join :Returns a string created by converting each element of the array to a string, separated by the given separator
-#keep_if :Deletes every element of self for which the given block evaluates to false.
#last :Returns the last element(s) of self. If the array is empty, the first form returns nil.
#length :Returns the number of elements in self. May be zero.
#map :Invokes the given block once for each element of self.
#map! :Invokes the given block once for each element of self, replacing the element with the value returned by the block.
-#pack :Packs the contents of arr into a binary sequence according to the directives in aTemplateString
#permutation :When invoked with a block, yield all permutations of length n of the elements of the array, then return the array itself.
#pop :Removes the last element from self and returns it, or nil if the array is empty.
#product :Returns an array of all combinations of elements from all arrays.
#push :Pushes the given object(s) on to the end of this array. This expression returns the array itself, so several appends may be chained together. See also #pop for the opposite effect.
-#rassoc :Searches through the array whose elements are also arrays.
#reject :Returns a new array containing the items in self for which the given block is not true. The ordering of non-rejected elements is maintained.
#reject! :Deletes every element of self for which the block evaluates to true, if no changes were made returns nil.
#repeated_combination :When invoked with a block, yields all repeated combinations of length n of elements from the array and then returns the array itself.
#repeated_permutation :When invoked with a block, yield all repeated permutations of length n of the elements of the array, then return the array itself.
#replace :Replaces the contents of self with the contents of other_ary, truncating or expanding if necessary.
#reverse :Returns a new array containing self's elements in reverse order.
#reverse! :Reverses self in place.
#reverse_each :Same as #each, but traverses self in reverse order.
#rindex :Returns the index of the last object in self == to obj.
#rotate :Returns a new array by rotating self so that the element at count is the first element of the new array.
#rotate! :Rotates self in place so that the element at count comes first, and returns self.
#sample :Choose a random element or n random elements from the array.
-#select :Returns a new array containing all elements of ary for which the given block returns a true value.
-#select! :Invokes the given block passing in successive elements from self, deleting elements for which the block returns a false value
#shift :Removes the first element of self and returns it (shifting all other elements down by one). Returns nil if the array is empty.
#shuffle :Returns a new array with elements of self shuffled.
#shuffle! :Shuffles elements in self in place.
#size : Length of array
#slice : Returns the element at index, or returns a subarray starting at the start index and continuing for length elements, or returns a subarray specified by range of indices.
#slice! :Deletes the element(s) given by an index (optionally up to length elements) or by a range.
#sort :Returns a new array created by sorting self.
-#sort! :Sorts self in place.
#sort_by! :Sorts self in place using a set of keys generated by mapping the values in self through the given block.
#take :Returns first n elements from the array. (not for negative elements)
#take_while :Passes elements to the block until the block returns nil or false, then stops iterating and returns an array of all prior elements.
#to_a :Returns self.
#to_ary :Returns self.
#to_h :Returns the result of interpreting ary as an array of [key, value] pairs.
#to_s :Alias for: inspect
#transpose :Assumes that self is an array of arrays and transposes the rows and columns.
#uniq :Returns a new array by removing duplicate values in self.
#uniq! :Removes duplicate elements from self.
#unshift :Prepends objects to the front of self, moving other elements upwards. See also #shift for the opposite effect.
#values_at :Returns an array containing the elements in self corresponding to the given selector(s).
#zip : Converts any arguments to arrays, then merges elements of self with corresponding elements from each argument.
#| :block
